import path from 'path';
import {
    getMigrationFiles,
    executeSqlFile,
    createMigrationsTableIfNotExists,
    isMigrationApplied,
    registerMigration
} from './utils.js';

async function runMigrations() {
    try {
        console.log('üöÄ Iniciando proceso de migraciones...');

        // Crear tabla de migraciones si no existe
        await createMigrationsTableIfNotExists();

        // Obtener todos los archivos de migraci√≥n
        const migrationFiles = getMigrationFiles();

        if (migrationFiles.length === 0) {
            console.log('No hay archivos de migraci√≥n para ejecutar.');
            return;
        }

        console.log(`Encontrados ${migrationFiles.length} archivos de migraci√≥n`);

        // Ejecutar cada migraci√≥n si no ha sido aplicada a√∫n
        for (const file of migrationFiles) {
            const migrationName = path.basename(file);
            const isApplied = await isMigrationApplied(migrationName);

            if (!isApplied) {
                console.log(`\nüîÑ Aplicando migraci√≥n: ${migrationName}`);
                await executeSqlFile(file);
                await registerMigration(migrationName);
                console.log(`‚úÖ Migraci√≥n ${migrationName} aplicada exitosamente`);
            } else {
                console.log(`‚è© Migraci√≥n ${migrationName} ya fue aplicada, omitiendo`);
            }
        }

        console.log('\n‚úÖ Proceso de migraciones completado exitosamente');
    } catch (error) {
        console.error('\n‚ùå Error durante el proceso de migraciones:');
        console.error(error);
        process.exit(1);
    }
}

// Ejecutar migraciones
runMigrations(); 